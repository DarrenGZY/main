<?npl
--[[
Title: table database manager
Author: LiXizhi
Date: 2016/7/3
Desc: 
]]
if(not is_admin()) then
  exit("access denied")
end
local src = request:get("src");
if(is_ajax()) then
	return;
end
wp_enqueue_script("ace", "/wp-includes/js/ace/ace.js");
wp_enqueue_script("angular", "/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("ngStorage", "/wp-includes/js/angular/ngStorage.js");
wp_enqueue_script("ngSanitize", "/wp-includes/js/angular/angular-sanitize.min.js");
wp_enqueue_style("easyui", "/wp-includes/js/jeasyui/themes/default/easyui.css");
wp_enqueue_style("easyui_icon", "/wp-includes/js/jeasyui/themes/icon.css");
wp_enqueue_style("jqueryui_css", "/wp-includes/js/jquery/jquery-ui.min.css");
wp_enqueue_script("easyui", "/wp-includes/js/jeasyui/jquery.easyui.min.js");
wp_enqueue_script("jqueryui", "/wp-includes/js/jquery/jquery-ui.min.js"); 
?>
<script>
    angular.module('DBManager', ['ngStorage', 'ngSanitize'])
    .config(['$localStorageProvider', function ($localStorageProvider) {
        $localStorageProvider.setKeyPrefix('NPLDBManager');
    }])
    .filter('filename', function() {
        return function (input, $scope) {
            return input.filename.split('/').pop() + ((input.filename == $scope.$storage.currentFilename && $scope.isModified) ? "*" : "");
        };
    })
    .directive('ngRightClick', function($parse) {
        return function(scope, element, attrs) {
            var fn = $parse(attrs.ngRightClick);
            element.bind('contextmenu', function(event) {
                scope.$apply(function() {
                    event.preventDefault();
                    fn(scope, {$event:event});
                });
            });
        };
    })
	.directive('focusOn', function() {
		return function(scope, elem, attr) {
			scope.$on(attr.focusOn, function(e) {
				elem[0].focus();
			});
		};
	})
    .controller('DBManagerController', function ($scope, $http, $interval, $localStorage) {
        $scope.fileExtensions = ["*.db"];
        $scope.status = "";
        $scope.rootdir = "";
        $scope.isModified = false;
		$scope.status = { type: null, htmlText: "" };
        $scope.$storage = $localStorage.$default({
            openedfiles: [], // {filename, line}
            extFilter: "*.db",
        });
		var workspaceDir = "<?=ParaIO.GetCurDirectory(0)?>";

        var req_src = "<?=src?>";
        if (req_src != "")
            $scope.$storage.currentFilename = req_src;

        $scope.notifications = [];
        // @param type: "success", "info", "warning", "danger"
        $scope.addNotice = function (notification, type, duration) {
            $scope.notifications.push({ text: notification, type: type || "success" });
            window.setTimeout(function () {
                $scope.notifications.splice(0, 1);
                $scope.$apply();
            }, duration || 3000);
        };
        // @param type: "success", "info", "warning", "danger"
        $scope.setStatus = function (innerHtmlText, type) {
            $scope.status.type = type;
            $scope.status.htmlText = innerHtmlText;
        };
		$scope.showTextContextMenu = function($event){
			$('#cmText').menu({
                onClick: function (item) {
                    if (item.name == "runCode")
                        $scope.runCode();
                    else if (item.name == "goto")
						$scope.gotoline();
					else if (item.name == "find")
						$scope.find();
                }
            });
			$('#cmText').menu('show', { left: $event.pageX - 5, top: $event.pageY - 10 });
		}
        $scope.clickFileTabMenu = function ($index, file, $event) {
            // right click tab for context menu
            $('#cmTabFile').find('#filename').text(file.filename.split('/').pop());
            $('#cmTabFile').menu({
                onClick: function (item) {
                    if (item.name == "close")
                        $scope.closeFile($index);
                    else if (item.name == "refresh")
                        $scope.openFile(file.filename, null, true)
                    else if (item.name == "openFolder")
                        $scope.openFolder(file.filename);
                    else if (item.name == "openExternal")
                        $scope.open_external(file.filename);
                    else if (item.name == "copyFullPath")
                        $scope.copyFullPath(file.filename);
                    $scope.$apply();
                }
            });
            $('#cmTabFile').menu('show', { left: $event.pageX - 5, top: $event.pageY - 10 });
        }
        $scope.open_external = function (filename) {
            $http.get("/ajax/viewsource?action=open_external&src=" + encodeURIComponent(filename)).then(function (response) { });
        }
        $scope.openFolder = function (filename) {
            filename = filename.substr(0, filename.lastIndexOf("/")+1);
            $scope.addNotice(filename);
            $http.get("/ajax/viewsource?action=open_external&src=" + encodeURIComponent(filename)).then(function (response) { });
        }
        $scope.copyFullPath = function (filename) {
            var fullpath = workspaceDir + filename;
            $scope.addNotice(fullpath);
        }
        
        $scope.closeFile = function (index, bForceClose) {
            if ($scope.$storage.openedfiles[index].filename != $scope.$storage.currentFilename) {
                $scope.$storage.openedfiles.splice(index, 1);
            }
            else {
                var editor = ace.edit("editor");
                if (!bForceClose && !editor.session.getUndoManager().isClean()) {
                    if (confirm("file:" + $scope.$storage.currentFilename + " is modified. Do you want to discard the changes?")) {
                        $scope.closeFile(index, true);
                    }
                    return;
                }
                $scope.$storage.openedfiles.splice(index, 1);
                if ($scope.$storage.openedfiles.length > 0)
                    $scope.openFile($scope.$storage.openedfiles[0].filename, $scope.$storage.openedfiles[0].line, true);
                else
                    $scope.openFile("", null, true);
            }
        }
        $scope.saveFileOpenHistory = function (filename, line) {
            for (var i = 0; i < $scope.$storage.openedfiles.length; i++) {
                if ($scope.$storage.openedfiles[i].filename.toLowerCase() == filename.toLowerCase()) {
                    $scope.$storage.openedfiles[i].line = line;
                    return;
                }
            }
        }
        $scope.addOpenFile = function (filename, line) {
            for (var i = 0; i < $scope.$storage.openedfiles.length; i++) {
                if ($scope.$storage.openedfiles[i].filename.toLowerCase() == filename.toLowerCase())
                    return;
            }
            $scope.$storage.openedfiles.push({ filename: filename, line: line });
        }
		$scope.getRelativePath = function (filename) {
			filename = filename.replace(/\\/g, "/");
			filename = filename.replace(workspaceDir, "");
			filename = filename.replace(/.*npl_packages\/[^\/]+\//g, "");
			return filename;
		}
        $scope.openFile = function (filename, line, bForceReopen, bForceNoPrompt) {
			filename = $scope.getRelativePath(filename);
            var editor = ace.edit("editor");
            if ($scope.$storage.currentFilename != filename || bForceReopen) {
            }
        }
        // binding editor
        function initEditor() {
            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/github");
            editor.session.setMode("ace/mode/lua");
            
            editor.on("input", function () {
                if($scope.isModified != !editor.session.getUndoManager().isClean()){
					$scope.isModified = !($scope.isModified);
					$scope.$apply();
				}
            });
			editor.container.addEventListener("contextmenu", function (e) {
                e.preventDefault();
                $scope.showTextContextMenu(e);
                return false;
            }, false);

            $("#resizable").resizable({
                maxHeight: 1200,
                minHeight: 300,
                handles: 's',
                resize: function (event, ui) {
                    editor.resize();
                }
            });

            $('#filedir').treegrid({
                onClickRow: function (row) {
                    var filename = row.id.replace(/#/g, "/");
                    if (/\.\w+$/.test(filename)) {
                        $scope.openFile(filename);
                    }
                    else {
                        if (row.state == "closed")
                            $('#filedir').treegrid("expand", row.id);
                        else if (row.state == "open")
                            $('#filedir').treegrid("collapse", row.id);
                    }
                }
            });
            if ($scope.$storage.currentFilename)
                $scope.openFile($scope.$storage.currentFilename, null, true);
        }
        initEditor();
        if(typeof Page != 'undefined')
            Page.ShowSideBar(false);
	});
</script>
<h1>NPL Code Editor</h1>
<div ng-app="DBManager" ng-controller="DBManagerController as Editor" style="margin-top:10px;" class="form-horizontal">
    <div class="row">
        <div class="col-md-4">
            <div>
                <div>
                    <div class="btn-group">
                        <button class="btn btn-default" title="Goto Root Directory" ng-click="NavigateTreeViewTo('/')">Root</button>
                        <button class="btn btn-default" title="Goto Current World Directory" ng-click="NavigateTreeViewTo('$world')">World</button>
                    </div>
                </div>
                <form ng-submit="NavigateTreeViewTo(rootdir)">
                    <input type="text" placeholder="enter directory" style="width:100%" ng-model="rootdir" />
                </form>
            </div>
            <table id="filedir" style="height:500px;width:100%;overflow: auto;" class="easyui-treegrid"
                   url="ajax/world?action=get_world_files&filter=*.lua&rootdir="
                   idField="id" treeField="filename" remoteSort="false" singleSelect="true">
                <thead>
                    <tr>
                        <th field="filename" width="100%" sortable="true">Filename</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class="col-md-8">
            <form id="openfileForm" style="margin-bottom:0px">
                <input type="text" placeholder="enter filename" style="width:calc(100% - 70px)" ng-model="openFilename" />
                <button type="submit" ng-click="openFile(openFilename)">open</button>
            </form>
            <div ng-repeat="notification in notifications">
                <div class="alert alert-{{notification.type}} fade in" style="margin-bottom:0px;">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    {{notification.text}}
                </div>
            </div>
            <ul class="nav nav-tabs" style="margin-top:5px;margin-bottom:0px;">
                <li ng-repeat="file in $storage.openedfiles" ng-class="{active:file.filename == $storage.currentFilename}">
                    <a ng-right-click="clickFileTabMenu($index, file, $event)" ng-click="openFile(file.filename, file.line)">{{file | filename:this}}<span ng-click="closeFile($index)"><i i class="glyphicon glyphicon-remove-sign"></i></span></a>
                </li>
            </ul>
            <div id="resizable" style="position:relative;min-height:512px;height:100%;padding-bottom:3px;border-bottom:3px solid #bbbbbb">
                <div id="editor" style="position: absolute; top:0;left:0;right:0;bottom:0;"></div>
            </div>
            <div ng-if='status.type'>
                <div class="alert alert-{{status.type}} fade in" style="margin-bottom:0px;">
                    <div ng-bind-html="status.htmlText"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="cmTabFile" class="easyui-menu" style="">
    <div data-options="name:'close',iconCls:'glyphicon glyphicon-remove-sign'">Close File</div>
    <div data-options="name:'refresh',iconCls:'glyphicon glyphicon-refresh'">Reload File</div>
    <div class="menu-sep"></div>
    <div data-options="name:'openFolder'">Open Containing Folder</div>
    <div data-options="name:'openExternal',iconCls:'glyphicon glyphicon-new-window'">Open In External Editor</div>
    <div data-options="name:'copyFullPath'">Copy Full Path</div>
</div>
<div id="cmText" class="easyui-menu" style="">
    <div data-options="name:'runCode'">Run (F5)</div>
</div>
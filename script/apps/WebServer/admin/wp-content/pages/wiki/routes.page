<?npl
--[[
Title: routing ajax/html requests
Author: LiXizhi
Date: 2016/6/29
Desc: redirect AJAX URL to model functions
Reference: http://guides.rubyonrails.org/routing.html

Mapping of CRUD AJAX operations: 
- PUT "/api/wiki/modesl/userprojects/new" --> wiki/models/userprojects:create()
- GET "/api/wiki/modesl/userprojects" --> wiki/models/userprojects:get()
- PUT "/api/wiki/modesl/userprojects" --> wiki/models/userprojects:update()
- DELETE "/api/wiki/modesl/userprojects" --> wiki/models/userprojects:delete()

Everything else is mapped to `wiki.page` as standard html file.
]]
local path = pagename() or "";

WIKI_ROOT = dirname(__FILE__).."/";

local ajax_path = path:match("^/?api/wiki/(.+)");
if(ajax_path) then	
	-- Allow for cross-domain requests (from the frontend). 
	send_origin_headers();
	addheader( 'Content-Type', 'text/html'); 
	addheader( 'X-Robots-Tag', 'noindex'); 
	send_nosniff_header();
	nocache_headers();	

	local modelname, params = ajax_path:match("^models/([%w_]+)/?(.*)")
	if(modelname) then
		local modelfilename = "./models/"..modelname..".page";
		if(not file_exists(modelfilename)) then
			return response:status(404):send({message="invalid model"});
		end
		include_once(modelfilename);
		
		local model = models and models[modelname];
		if(not model) then
			return response:status(404):send({message="model not found"});
		else
			model = model:new();
		end

		-- redirect CRUD URL to method in model.
		if(request:GetMethod() == "GET") then
			if(model.get) then
				local result = model:get(request:getparams());
				return response:send(result);
			end
		elseif(request:GetMethod() == "PUT") then
			if(params and params:match("^new")) then
				if(model.create) then
					local result = model:create(request:getparams());
					return response:send(result);
				end
			else
				if(model.update) then
					local result = model:update(request:getparams());
					return response:send(result);
				end
			end
		elseif(request:GetMethod() == "DELETE") then
			if(model.delete) then
				local result = model:delete(request:getparams());
				return response:send(result);
			end
		end
	else
		-- only allow ajax in wiki folder
		include( "./"..ajax_path..".page" );
	end
	return;
end
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN">
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"  />
<title><?npl wp_title(); ?></title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">      
<?npl
wp_enqueue_script("jquery", "/wp-includes/js/jquery/jquery.min.js", nil, "1.11.1"); 
wp_enqueue_style("bootstrap", "/wp-includes/js/bootstrap/css/bootstrap.min.css");
wp_enqueue_style("sensitive_style", "/wp-content/themes/sensitive/css/style.css"); 
wp_enqueue_script("bootstrap", "/wp-includes/js/bootstrap/js/bootstrap.min.js");
?>
</head>
<body>
<? include(WIKI_ROOT.."wiki.page") ?>
</body>
</html>
